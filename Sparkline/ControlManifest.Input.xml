<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="XrmVision" constructor="Sparkline" version="0.0.1" display-name-key="Sparkline" description-key="Sparkline control based on react-sparklines" control-type="standard">
    <!-- property node identifies a specific, configurable piece of data that the control expects from CDS -->
    <!-- <property name="timevalue" display-name-key="Time Value Field" description-key="Bind this property to the field where you want to store the time value" of-type="SingleLine.Text" usage="bound" required="true" /> -->
    <property name="values" display-name-key="Values" description-key="Bind this property to the field where the values of the sparkline are stored" of-type="SingleLine.Text" usage="input" required="true" default-value="5,10,60,30,35,100"/>
    <property name="separator" display-name-key="Separator" description-key="separator between the values" of-type="SingleLine.Text" usage="input" required="true" default-value="," />
    <property name="color" display-name-key="Color" description-key="main color of the sparkline" of-type="SingleLine.Text" usage="input" required="true" default-value="blue" />
    <property name="height" display-name-key="Height" description-key="Height of the sparkline" of-type="Whole.None" usage="input" required="true" default-value="25" />
    <property name="width" display-name-key="Width" description-key="Width of the sparkline" of-type="Whole.None" usage="input" required="true" default-value="100" />
    <property name="type" display-name-key="Type" description-key="Type of the sparkline" of-type="Enum" usage="input" required="true">
      <value name="line" display-name-key="Line" description-key="Regular sparkline" default="true">Line</value>
      <value name="rounded" display-name-key="Rounded" description-key="Rounded sparkline">Rounded</value>
      <value name="bar" display-name-key="Bar" description-key="Bars sparkline">Bars</value>
    </property>
		<property name="fill" display-name-key="Fill" description-key="Fill under the spakline" of-type="TwoOptions" usage="input" required="true" default-value="true"/>

    <!-- 
      Property node's of-type attribute can be of-type-group attribute. 
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <css path="css/Sparkline.css" order="1" />
      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/TimePicker.css" order="1" />
      <resx path="strings/TimePicker.1033.resx" version="1.0.0" />
      -->
    </resources>
    <!-- UNCOMMENT TO ENABLE THE SPECIFIED API
    <feature-usage>
      <uses-feature name="Device.captureAudio" required="true" />
      <uses-feature name="Device.captureImage" required="true" />
      <uses-feature name="Device.captureVideo" required="true" />
      <uses-feature name="Device.getBarcodeValue" required="true" />
      <uses-feature name="Device.getCurrentPosition" required="true" />
      <uses-feature name="Device.pickFile" required="true" />
      <uses-feature name="Utility" required="true" />
      <uses-feature name="WebAPI" required="true" />
    </feature-usage>
    -->
  </control>
</manifest>